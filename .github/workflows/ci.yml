name: Build Image

on:
  push:
    branches:
      - main
    paths:
      - 'ci/**'
      - '.github/workflows/ci.yml'

  workflow_dispatch:
    inputs:
      image:
        description: Image name
        type: string
      version:
        description: Image version tag
        type: string
      frappe-repo:
        description: Frappe repo
        type: string
      frappe-version:
        description: Frappe branch
        type: string
      py-version:
        description: Python version
        type: string
      nodejs-version:
        description: NodeJS version
        type: string
      apps-json-base64:
        description: base64 encoded string of apps.json
        type: string
      context:
        description: kaniko context
        type: string
      dockerfile:
        description: dockerfile path from context
        type: string
      registry-user:
        description: registry username
        required: false

    secrets:
      REGISTRY_PASSWORD:
        description: registry password
        required: false

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate version and cache key
        id: version
        run: |
          # Check if required files exist
          if [ ! -f "./ci/apps.json" ]; then
            echo "Error: ./ci/apps.json not found"
            exit 1
          fi
          if [ ! -f "./ci/build.env" ]; then
            echo "Error: ./ci/build.env not found"
            exit 1
          fi
          
          # Use timestamp with time + short commit hash for unique version
          VERSION=$(date +'%Y.%m.%d-%H%M')-$(git rev-parse --short HEAD)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
          echo "COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
          
          # Generate cache key with branch name to avoid conflicts
          APPS_HASH=$(sha256sum ./ci/apps.json | cut -d ' ' -f 1)
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "APPS_HASH=$APPS_HASH" >> $GITHUB_ENV
          echo "CACHE_SCOPE=${BRANCH_NAME}-${APPS_HASH}" >> $GITHUB_ENV
          
          # Update version.txt for future reference (only on main branch)
          if [ "$GITHUB_REF" = "refs/heads/main" ] && [ "$GITHUB_EVENT_NAME" = "push" ]; then
            echo "$VERSION" > ./ci/version.txt
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            git add ./ci/version.txt
            git commit -m "Update version to $VERSION" || echo "No changes to commit"
            git push || echo "Failed to push version update"
          fi

      - name: Source Build Env
        id: source-build-env
        run: |
          cat ./ci/build.env >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "APPS_JSON_BASE64=$(base64 -w 0 ./ci/apps.json)" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          repository: frappe/frappe_docker
          path: builds

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry || env.REGISTRY }}
          username: ${{ inputs.registry-user || github.actor }}
          password: ${{ secrets.REGISTRY_PASSWORD || secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          context: builds
          file: builds/${{ inputs.dockerfile || env.DOCKERFILE }}
          tags: |
            ${{ inputs.registry || env.REGISTRY }}/${{ env.PROJECT_NAMESPACE || github.repository }}/${{ inputs.image || env.IMAGE }}:${{ inputs.version || env.VERSION }}
            ${{ inputs.registry || env.REGISTRY }}/${{ env.PROJECT_NAMESPACE || github.repository }}/${{ inputs.image || env.IMAGE }}:latest
          cache-from: type=gha,scope=${{ env.CACHE_SCOPE }}
          cache-to: type=gha,mode=max,scope=${{ env.CACHE_SCOPE }}
          build-args: |
            "FRAPPE_PATH=${{ inputs.frappe-repo || env.FRAPPE_REPO }}"
            "FRAPPE_BRANCH=${{ inputs.frappe-version || env.FRAPPE_VERSION }}"
            "PYTHON_VERSION=${{ inputs.py-version || env.PY_VERSION }}"
            "NODE_VERSION=${{ inputs.nodejs-version || env.NODEJS_VERSION }}"
            "APPS_JSON_BASE64=${{ inputs.apps-json-base64 || env.APPS_JSON_BASE64 }}"
            "CACHE_BUST=${{ env.BUILD_DATE }}"
          labels: |
            org.opencontainers.image.created=${{ env.BUILD_DATE }}
            org.opencontainers.image.revision=${{ env.COMMIT_SHA }}
            org.opencontainers.image.version=${{ inputs.version || env.VERSION }}